<ひとくち説明>
クラス：設計図  
オブジェクト：変数や関数をひとつの実体にカプセル化したもの  
インスタンス：クラス（設計図）から作成された具体的な「オブジェクト」  
このクラス(設計図)から具体的なオブジェクト(モノ)にする動作、工程を「インスタンス化」という。  
コンストラクタ：オブジェクトが生成(インスタンス化)されるときに自動的に呼び出され、オブジェクトの初期値設定を担う。 初期属性を簡略化するだけで、初期化という観点ではメソッドには影響しない。  
メソッドで実行する際に引数としてコンストラクタで指定した値を用いる。  
コンストラクタの役割：オブジェクトに必要なデータを初期化する。  
メソッドの役割：初期化されたデータ（属性）を使って処理を行う。  

<詳細説明>
1. 変数（属性）  
オブジェクトは、データ（変数）を持っています。  
これらの変数は、オブジェクトの属性やプロパティと呼ばれます。例えば、人を表すオブジェクトには「名前」や「年齢」といった属性があります。  
2. 関数（メソッド）  
オブジェクトは、データを操作するための**関数（メソッド）**も持っています。  
メソッドはオブジェクトに関連する動作です。たとえば、「人」というオブジェクトであれば、「歩く」や「話す」といった動作（メソッド）を定義できます。
4. コンストラクタ
Pythonでは、コンストラクタは __init__ という特別な名前のメソッドで定義されます。  
このメソッドは、クラスからインスタンスを作ったときに自動的に呼び出され、そのインスタンスに必要な初期設定
（例えば、変数の値を決めるなど）を行います。
コンストラクタは必ず最初の引数に self を取ります。self はそのクラスのインスタンス自身を指します。  
これを使って、そのインスタンスの属性（データ）にアクセスしたり、設定したりします。  
コンストラクタがない場合、オブジェクトを作るたびに手動で属性を設定しなければなりません(参照：Class_samplexx.py)。これは手間がかかり、コードが複雑になりやすく、ミスも増えます。  
コンストラクタはオブジェクトの初期設定を簡略化し、コードの信頼性と可読性を大幅に向上させます。
コンストラクタの役割：オブジェクトに必要なデータを初期化する。
メソッドの役割：初期化されたデータ（属性）を使って処理を行う。
コンストラクタでは可変属性は初期化すること。

<ひとくち説明>
継承：クラス継承(クラスにだけ存在すると認識してよい)は、子クラスが親クラス（スーパークラス）の属性やメソッドを引き継ぐ（再利用する）仕組み。  
親クラスにある機能をそのまま使ったり、必要に応じて上書き（オーバーライド）したりすることが可能。
pythonではクラスベースの継承であるが、javascriptではプロトタイプベースの継承(クラスの概念がない)となる。  
javascriptに関してはまたおいおい。
コンポジション：オブジェクト指向プログラミングにおける設計の考え方の一つ。「部品（パーツ）としてオブジェクトを持つことで、より複雑なオブジェクトを作る」という考え方。クラス同士の関係性を「継承」ではなく「部品として持つ」ことで表現します。

<詳細説明>
※継承が「is-a」/コンポジションが「has-a」
コンポジションのメリットは、柔軟性と再利用性です。クラス同士の関係を継承によって表現する代わりに、別のクラスをパーツとして持つことで、異なるオブジェクトを組み合わせて柔軟に作ることができます。
コンポジションは、大きなカテゴリとしては同じ属性や機能を持ちながら、小さなカテゴリでは異なる振る舞いを持たせるという状況に非常に適しています。
つまり、クラスとして使用していた属性に幅を持たせ、他のクラスで再利用できるように大きなカテゴリとしては同じだが、小カテゴリとしては別分類として扱いたい場合に対応したと言える。

<ひとくち説明>
モジュール：Pythonコード全般を組織化するための単位。関数、クラス、その他のデータを構造化したものと捉えてよい。  
python fileそのものを指す。特段OPPに特化したものではない。

<詳細説明>
モジュールとクラスは同義ではありません。モジュールはPythonファイルで、関数やクラスなどをまとめて整理・再利用するために使います。クラスは、データとその処理をまとめるオブジェクト指向の設計図です。
関数とメソッドも同義ではありません。関数はモジュール内に定義され、独立して使われるものですが、メソッドはクラスのインスタンスに紐づき、そのデータを操作するためのものです。
モジュールはクラスや関数を含む「大きな単位」として使われ、クラスはオブジェクト指向プログラミングの「設計図」として使われます。それぞれの文脈に応じて適切に使い分けることが重要。  
---> おそらく、発祥となった概念の出所がちがうんだろう。多分だけど、あらゆる人があらゆる概念を具現化するのがソースコードなので、全く別の切り口から着想を得たものでも、機能や振る舞いとしては同じようにみえることが多分にあって、これが言葉を厳密に使うこととはいうものの、プログラミングで表現した言葉や概念と一般に使用している言葉に対応するものが存在せず、違う文脈で全く同じワードが使用されて説明されていたりするので初学者には余計混乱を引き起こすのだろう...。
クラス= オブジェクト指向プログラミング（OOP）の一部であり、データとその操作を一体化して扱うために生まれた概念
        現実世界の「もの（オブジェクト）」をモデル化するための手法として開発された
モジュール = コードの整理と再利用性を高めるために生まれた概念。コードが大規模になると、そのままでは管理や再利用が難しくなるため、「コードを分割し、複数のファイルに分けて整理する」という目的で作られました。モジュールの考え方は、プログラムの規模が大きくなるにつれて生まれてきたもの。最初は小さなプログラムが多かったものの、次第にコードの規模が大きくなり、複数人での開発が当たり前になったことで、コードを分割して管理するというニーズが生まれた。

あーなんか大前提の言語とは何かってところから説明した方がプログラミングを理解しやすいのかもしれないなぁ。。。それについては別のfileにまとめた。
